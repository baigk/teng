@c -*-texinfo-*-
@c FILE              $Id: api_php.texi,v 1.2 2004-09-09 15:56:06 franci_cz Exp $
@c
@c DESCRIPTION       Teng manual -- chapter 'API'.
@c
@c AUTHOR            Vaclav Blazek <blazek@firma.seznam.cz>
@c
@c Copyright (c) 2003 Seznam.cz, a.s.
@c All Rights Reserved.
@c
@c HISTORY
@c       2003-10-08  (vasek)
@c                   Created.
@c	 2003-10-09  (ondra)
@c		     First version.
@c

@c PHP API index
@defindex ph

@iftex
@c new page in printed manual
@page
@end iftex
@c ======================================================================
@c PHP extension chapter
@c ======================================================================
@node PHP Extension, , Python Module, Program Interface
@chapter Teng PHP Extension
@cindex interface, API, PHP, extension

@noindent PHP Teng extension provides access to Teng functionality for PHP4
programmers.

@menu
* PHP Requirements::             Requirements to Build This Extension.
* PHP Installation::             Installing This Extension.
* PHP Runtime Configuration::    Runtime Configuration Options.
* PHP Resource Types::           Resource Types.
* PHP Functions::                Functions.
* PHP Example::                  An Example.
@end menu

@c ======================================================================
@c Requirements subsection
@c ======================================================================
@node PHP Requirements, PHP Installation, , PHP Extension
@section Requirements

@noindent To use the PHP Teng extension, Teng needs to be compiled into your
PHP4 build.  See the following subsection on instructions how to do
it.  The authors of the extension have used PHP 4.3.2 for their build
though any version greater than 4.1. should suffice.

Though Teng PHP extension can be built as a loadable PHP module, it is
a better option to compile it into the PHP source to make use of
Teng's template caching features.  Remember, template caching is one
of the prime reasons for Teng's use.  Using Teng as a loadble PHP
module is perfectly possible, but your template and dictionary files
will be parsed on every request.

@c ======================================================================
@c Installation subsection
@c ======================================================================
@node PHP Installation, PHP Runtime Configuration, PHP Requirements, PHP Extension
@section Installation

@noindent Follow these steps to install PHP4 with Teng extension on your
system:

@enumerate

@item
Unpack Teng source into a build directory,
e.g. @file{/usr/local/src/teng}.  Build and install the teng library.

@item
Obtain a source PHP distribution, and unpack it into a build
directory, e.g. @file{/usr/local/src/php4}.

@item
Link the Teng extension into the PHP4 extension directory as
@example
$ ln -s /usr/local/src/teng/src/php /usr/local/src/php4/ext/teng
@end example

@item
In the PHP source distribution root, run
@example
$ ./buildconf --force
@end example

@item
Configure PHP to use the Teng extension.  If you already have Teng
library installed on your system, all you need to do
@example
$ ./configure --with-apxs --with-teng
@end example
Depending on where you installed Teng, you might have to provide the
installation path along with the option.  Quite likely, you will also
want to use other configure options to compile more extensions to your
PHP build. Try @code{./configure --help} to see what's on the menu.

@item
From here, you probably know the drill
@example
$ make; make install
@end example

@item
Try
@example
$ echo '<?php phpinfo() ?>' | /usr/local/bin/php
@end example
And look for the Teng extension section in output.

@end enumerate

@c ======================================================================
@c Runtime configuration subsection
@c ======================================================================
@node PHP Runtime Configuration, PHP Resource Types, PHP Installation, PHP Extension
@section Runtime Configuration

@noindent Teng's behavior is affected by the following @file{php.ini} entries:

@multitable @columnfractions .3 .2 .2
@item @strong{Name} @tab @strong{Default} @tab @strong{Changeable}
@item @var{teng.template_root} @tab @code{NULL} @tab PHP_INI_ALL
@item @var{teng.default_dict} @tab @code{NULL} @tab PHP_INI_ALL
@item @var{teng.default_lang} @tab @code{NULL} @tab PHP_INI_ALL
@item @var{teng.default_config} @tab @code{NULL} @tab PHP_INI_ALL
@item @var{teng.default_content_type} @tab @samp{text/html} @tab PHP_INI_ALL
@item @var{teng.default_encoding} @tab @samp{ISO-8859-2} @tab PHP_INI_ALL
@item @var{teng.validation} @tab @samp{Off} @tab PHP_INI_ALL
@item @var{teng.log_to_output} @tab @samp{Off} @tab PHP_INI_ALL
@item @var{teng.error_fragment} @tab @samp{Off} @tab PHP_INI_ALL
@item @var{teng.default_skin} @tab @code{NULL} @tab PHP_INI_ALL
@end multitable

@noindent A short explanation of the configuration directives follows.

@deftypevr Directive string teng.template_root
Defines the default root path used to access Teng templates and
dictionaries.  This directive can be overriden by the first argument
to @code{teng_init}.
@end deftypevr

@deftypevr Directive string teng.default_dict
@phindex teng.default_dict
@phindex default_dict (directive on teng)
Sets the path to default language dictionary. Setting this directive
is equivalent to passing a corresponding @code{dict} parameter in any
call to @code{teng_page_} family of functions.
@end deftypevr

@deftypevr Directive string teng.default_lang
@phindex teng.default_lang
@phindex default_lang (directive on teng)
Sets the default language. Setting this directive is equivalent to
passing a corresponding @code{lang} parameter in any call to
@code{teng_page_} family of functions.
@end deftypevr

@deftypevr Directive string teng.default_config
@phindex teng.default_config
@phindex default_config (directive on teng)
Sets the path to default template configuration. Setting this
directive is equivalent to passing a corresponding @code{config}
parameter in any call to @code{teng_page_} family of functions.
@end deftypevr

@deftypevr Directive string teng.default_content_type
@phindex teng.default_content_type
@phindex default_content_type (directive on teng)
Sets the default content type. Setting this directive is equivalent to
passing a corresponding @code{content_type} parameter in any call to
@code{teng_page_} family of functions.  Content type effects escaping
of data passed passed from the application, and formating of
diagnostic output for parse and runtime errors.  See the Teng section
in @code{phpinfo} output, or the output of
@code{teng_list_content_types} for suported content types.
@end deftypevr

@deftypevr Directive string teng.default_encoding
@phindex teng.default_encoding
@phindex default_encoding (directive on teng)
Sets the default document encoding.  Setting this directive is
equivalent to passing a corresponding @code{encoding} parameter in any
call to @code{teng_page_} family of functions.  Encodings are denoted
in the iconv(1) uses.
@end deftypevr

@deftypevr Directive boolean teng.validation
@phindex teng.validation
@phindex validation (directive on teng)
This boolean flag indicates whether Teng should perform template and
application data validation. Validation provides a way to define the
structure of data which can be passed from the application to the
presentation layer (data definition).  When validation is turned on,
data definition file is supplied to a call to any @code{teng_page_}
function, failure to meet the data definition requirements on part of
the template or of the application causes Teng to complain.
@end deftypevr

@deftypevr Directive boolean teng.log_to_output
@phindex teng.log_to_output
@phindex log_to_output (directive on teng)
If this boolean flag is set, teng logs parsing and runtime errors into
content-type dependant comments on the output page.  If you send Teng
output directly to the script output, @var{teng.log_to_output} is
similar to @var{log_errors} but it does not clutter up the page.
@end deftypevr

@deftypevr Directive boolean teng.error_fragment
@phindex teng.error_fragment
@phindex error_fragment (directive on teng)
If this boolean flag is set, diagnostic page-generation output is
added to every data tree in the form of a special error fragment,
@samp{._error}.  The fragment contains @var{level}, @var{filename},
@var{line} and @var{message} variables and the template can use it to
visualize errors in a customized manner.
@end deftypevr

@deftypevr Directive string teng.default_skin
@phindex teng.default_skin
@phindex default_skin (directive on teng)
Sets the default template skin.  Setting this directive is equivalent
to passing a corresponding @code{skin} parameter in any call to
@code{teng_page_} family of functions.
@end deftypevr

@c ======================================================================
@c Resource types subsection
@c ======================================================================
@node PHP Resource Types, PHP Functions, PHP Runtime Configuration, PHP Extension
@section Resource Types

@noindent Two resource types exist in the Teng extension. 

The first resource type provides access to the templating engine
itself.  A Teng resource is persistent.  Once created, exists until
the Teng extension remains in memory, allowing the cached templates
and dictionary files to be reused by further requests.  A repeated
call to @code{teng_init} with the same template root results in
reusing the previously created resource.

The second resource type represents a fragment.  A fragment is a
reference to a position in an internal data tree built using Teng
extension.  Fragment resources are fully reentrant (multiple data
trees can exist simultanously within a single application) and
non-persistent, that is, they are discarded, along with the data they
refer to, at the end of every request.

@c ======================================================================
@c Functions subsection
@c ======================================================================
@node PHP Functions, PHP Example, PHP Resource Types, PHP Extension
@section Functions

@noindent PHP Teng extension provides the following functions:

@c --- teng_init ---

@deftypefun resource teng_init ([ string @var{template_root} ])
@phindex teng_init

@code{teng_init} returns a new teng resource.  A Teng resource
provides the application with access to the templating engine.

@var{template_root} sets the implicit path used to access templates
and dictionaries.  If not provided, the @var{teng.template_root}
configuration directive is used.  If the directive is not set, the
script's current working directory is used.

Teng resources are persistent which means there lifetime exceeds a
duration of a single request.  If a Teng instance with a given
template_root was allocated before the return value points to a
previously allocated instance.  This allows the application to
seamlessly cache templates and dictionaries across multiple HTTP
requests.
@end deftypefun

@c --- teng_release ---

@deftypefun boolean teng_release (resource @var{teng}) 
@phindex teng_release

@code{teng_release} releases a teng resource @var{teng} previously
created created with @code{teng_init}.  This has no other effect but
invalidation of the resource in current symbol table, the Teng
instance the resource points continues to exist in PHP's memory.

Calling this function is not necessary but is recommended as a good
practice.  An application programmer uses this call to inform PHP that
there is in further use for the Teng resource.

@end deftypefun 

@c --- teng_create_data_root ---

@deftypefun resource teng_create_data_root ([ array @var{data} ])
@phindex teng_create_data_root

@code{teng_create_data_root} allocates and initializes new internal
data tree and returns it as a new fragment resource.  Internal data
trees are a fast and convenient way to pass application data to Teng.

@var{data} is an associative array with the content of data tree's
root fragment.  Nested lists of associative arrays can be included and
function as one would expect, though there is usually little reason to
use them: use @code{teng_add_fragment} to nest fragments instead.  Any
non-associative (integer key) elements in @var{data} are silently
ignored.  If @var{data} is not provided, the root fragment is created
empty.

The fragment resource returned by @code{teng_create_data_root} can be
used as an @var{parent} argument to @code{teng_add_fragment} and as
the @var{data} argument to @code{teng_page} family of functions.  The
fragment resource should be cleared by @code{teng_release_data} when
no longer needed, though PHP will do this automatically at the end of
the request.

@end deftypefun

@c --- teng_release_data ---

@deftypefun resource teng_release_data (resource @var{root})
@phindex teng_release_data

@code{teng_release_data} removes the data tree @var{root} allocated by
@code{teng_create_data_root} from memory and invalidates the
corresponding fragment resource.  Any nested fragment resource created
by @code{teng_add_fragment} is also invalidated.

PHP automatically removes the data tree and invalidates corresponding
fragment resources at the end of any HTTP request.  However, it is a
good pratice to call @code{teng_release_data} when the data tree is no
longer needed.

@end deftypefun

@c --- teng_add_fragment ---

@deftypefun resource teng_add_fragment (resource @var{parent}, string @var{name} [, array@ @var{data} ])
@phindex teng_add_fragment

@code{teng_add_fragment} adds a nested fragment to a fragment refered
to by resource @var{parent} and returns a new fragment resource for
it.

@var{name} is the name of the nested fragment, @var{data} is an
associative array with fragment content.  Nested lists of associative
arrays can be included and function as one would expect, though there
is usually little reason to use them: use @code{teng_add_fragment} on
the returned resource to nest fragments instead.  Any non-associative
(integer key) elements in @var{data} are silently ignored.  If
@var{data} is not provided, the fragment is created as empty.

The resource returned by @var{teng_add_fragment} can be used as the
@var{parent} argument to @code{teng_add_fragment}.  This implies it is
sensible to keep the return value only when another level of nesting
is added.  The resource is automatically invalidated when
@code{teng_release_data} is called on the data root resource.

@end deftypefun

@c --- teng_page_string ---

@deftypefun string teng_page_string (resource @var{teng}, string @var{template_path} [, array/resource @var{data} [, array @var{options} ] ])
@phindex teng_page_string

@code{teng_page_string} invokes the Teng engine to generate a page
from a template file and returns the result as a string.

@var{teng} is a Teng resource created by
@code{teng_init}. @var{template_path} is a path to a Teng template
file, either absolute or relative to the Teng template root.

@var{data} is either an associative array or a fragment resource.
Both hold the entire data tree.  In the first case, the associative
array holds the root fragment content, with optional nested lists of
associative arrays for multi-level data trees.  In the second case,
the fragment resource is created by @code{teng_create_data_root} and
optionally populated by calls to @code{teng_add_fragment}.

@var{options} is an optional associative array holding a number of
options modifying Teng's behavior in the process of page generation.
Any number of options can be included.  The folowing strings can be
used as keys in @var{options}:

@table @var

@item skin
Specifies a skin to use with the template.  If specified, the skin
works as modifier for the template name.  If template is
@samp{foo.html} and the skin option is set to @samp{bar}, Teng will
search for @samp{foo.bar.html} in its template root.

@item dict
Specifies path of a language dictionary to use with the template.  The
path is absolute or relative to Teng's template root.

@item lang
Specifies a language variant of the dictionary.  If specified, the
skin works as a modifier for language dictionary path.  If dict is
@samp{foo.dict} and the lang is set to @samp{cz}, Teng wil search for
@samp{foo.cz.dict} in its template root.

@item config
Specifies path of a configuration dictionary to use with the template.
The path is absolute or relative to Teng's template root.

@item definition
Specifies path of a document definition to use with the
@var{template_path} and @var{data}.  If the document definition is set
and @var{teng.validation} directive is @samp{On}, Teng validates the
template and application data using the document definition provided
and complains loudly if the document validation is violated.

@item content_type
Specifies the content type of the generated page.  Content type
determines the way data passed to the output page is quoted and format
of diagnostic output for runtime errors log, if included in output.
If not set, value of @var{teng.content_type} directive is used.

@item encoding
Specifies the character encoding of the generated page.  Setting the
correct character encoding ensures Teng functions such as @var{len}
and @var{substr}, particularly if your document uses multi-byte
character encoding.  If not set, the value of @var{teng.encoding} is
used.

@end table

Any runtime errors in page generation are logged to PHP error output.

@end deftypefun

@c --- teng_page_string_from_string ---

@deftypefun string teng_page_string_from_string (resource @var{teng}, string @var{template_path} [, array/resource @var{data} [, array @var{options} ] ])
@phindex teng_page_string_from_string

@code{teng_page_string_from_string} invokes the Teng engine to
generate a page from a template string and returns the result as a
string.

For a description of @var{teng}, @var{data}, @var{options} arguments
please see the documentation of @code{teng_page_string}.

@end deftypefun

@c --- teng_dict_lookup ---

@deftypefun string teng_dict_lookup (resource @var{teng}, string @var{key} [,string @var{dict} [, string @var{lang} ] ])
@phindex teng_dict_lookup

@code{teng_dict_lookup} looks up a dynamic literal and returns the
result.

@var{teng} is a Teng resource created by @code{teng_init}.  @var{key}
is the dynamic literal to be looked up.  @var{dict} is the path to
dictionary file.  If not provided, value of @var{teng.default_dict} is
used. @var{lang} is an optional language variant (a modifier to
@var{dict}, see documentation of @code{teng_page_string} for details).

@code{teng_dict_lookup} returns FALSE if the dictionary lookup fails.

@end deftypefun

@c --- teng_list_content_types ---

@deftypefun array teng_list_content_types ()
@phindex teng_list_content_types

@code{teng_list_content_types} lists content types supported by Teng.
The return value is an associative array, with each element containing
supported content type as the key and a brief description as the
value.

@end deftypefun


@c ======================================================================
@c Example subsection
@c ======================================================================
@node PHP Example, , PHP Functions, PHP Extension
@section An Example

@noindent There are numerous ways to produce the reference example output 
(@ref{The Reference Example}) using Teng PHP Extension.  Two
significantly different options exist.

The first approach uses native PHP data structures to pass a data tree
from a PHP script to Teng.

@example

<?php
  // initialize Teng engine with default data root
  $teng = teng_init();

  // build data tree from bottom up
  $data = array();

  for ( $i = 'A'; $i < 'C'; $i++ ) @{
      $row = array( 'rnum' => $i );

      for ( $j = 0; $j < 2; $j++ )
          $row[ 'col' ][] = array( 'cnum' => $j );

      $data[ 'row' ][] = $row;
  @}

  // generate page
  echo( teng_page_string( $teng, "palette.html", $data,
      array( "content_type" => "text/html",
             "encoding" => "ISO-8859-2" ) ) );

  // release teng engine (not necessary, but good practice)
  teng_release( $teng );
?>

@end example

@noindent A different approach uses the Teng extension API to build the data tree.

@example

<?php
  // initialize Teng engine with default data root
  $teng = teng_init();

  // create new data tree
  $data = teng_create_data_root();

  // build data tree from top to bottom
  for ( $i = 'A'; $i < 'C'; $i++ ) @{
     // add nested row fragment
     $row = teng_add_fragment( $data, "row", array( "rnum" => $i ) );

     for ( $j = 0; $j < 2; $j++ )
        // add nested column fragment
        teng_add_fragment( $row, "col", array( "cnum" => $j ) );
  @}

  // generate page
  echo( teng_page_string( $teng, "palette.html", $data,
      array( "content_type" => "text/html",
             "encoding" => "ISO-8859-2" ) ) );

  // release data tree (not necessary, but good practice)
  teng_release_data( $data );

  // release teng engine (not necessary, boot good practice)
  teng_release( $teng );
?>

@end example

The first approach is a recommended option for simplistic data trees,
with at most two nesting levels and little or no data outside the root
fragment.  The second approach is better suitable for more complex
data trees, which would be difficult to build and navigate using PHP
arrays.  It should be also noted that, for larger data trees, Teng
extension API is considerably more effective than native PHP data
structures and consumes less memory.

