@c $Id: template.texi,v 1.5 2004-09-10 12:26:55 franci_cz Exp $
@c Syntax index
@defindex sy

@node Syntax, C++ API, , Top
@chapter Syntax


Tags are enclosed by @strong{<?teng} and @strong{?>} marks.

@section Comment
@syindex comment

<!--- comment --->

Comment will not be in output file.

@section Include

<?teng include file="@var{template.teng}" ?>

Include other template file.

@section Whitespace formating
@syindex whitespace, formating

begin of block: <?teng format space="@var{value}" ?>
end of block: <?teng endformat ?>

Set type of formating whitespace in output file. Value of @emph{space} is one of:
@table @emph
@item nowhite
removes all whitespaces
@item onespace
collapse all whitespace characters into one space
@item striplines
removes all whitespaces at the begin and end of row except line break
@item joinlines
removes newline character and all whitespaces at begin of next row
@item nowhitelines
removes all empty rows
@item noformat
end parent space formating
@end table

@section Fragment
@syindex fragment

begin of block: <?teng frag @var{identifier} ?>
end of block:	<?teng endfrag ?>

Basic data block for reference by application

Default variables:
@table @emph
@item _count
number of iterations of fragment.
@item _number
actual count of iteration. It begins with 0 and exists only in fragment.
@item _this
actual fragment context
@end table

@section Condicional block
@syindex condition
@syindex if
@syindex elseif
@syindex else

begin: <?teng if @var{expression} ?>@*
next:  <?teng elseif @var{expression} ?>@*
next:  <?teng else ?>@*
end:   <?teng endif ?>@*
@*
@var{Expression} is envaluated as @var{false} if is equal to empty string, string "0" or number 0. Type of data is ignored.

@section Definition of variable
@syindex variables, definition

<?teng set @var{variable}=@var{expression} ?>
@*@*
Variable is available only in current fragment. Redefinition of variable submited by application will raise error.

@section Variable
@syindex variables

<?teng expr @var{$variable} ?>@*
short: $@{variable@}@*
shorter: $variable
@*@*
Include variable (data from application or defined by @strong{set} tag).
Must begin with letter or _. Can be followed by number. Must start with $ character in expression.@*

Naming convetion
@syindex variables, naming
@multitable {mmmmmmmmmmmmmmm} {mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm}
@item name @tab unqualified identifier. Only in local context of actual fragment
@item recipient.name @tab partialy qualified identifier
@item .message.recipient.name @tab fully qualified identifier
@end multitable

@section Dictionary item
@syindex dictionary

<?teng expr @var{#item} ?>@*
short: #@{item@}@*
shorter: #item

Include item from language dictionary into output.

@section Expression
@syindex expression

<?teng expr @var{expression} ?>@*
short: $@{expression@}
@*@*
General expression. Can by combination of data literals, variables, dictionary items, functions, operators and parentheses. Parentheses sets priority.

@section Literals
@syindex literals

@table @strong
@item string
"Lorem ipsum dolor sit amet"
@table @asis
@item Escaped characters
@item \"
quote "
@item \\
backslash \
@item \n
new line
@item \r
carriage return
@item \t
tabelator
@item \<char>
<char>
@end table
@item integer
123
@item real number (float)
123.45
@end table

@section Operators
@syindex operator
@syindex operator, bit

@multitable {mmmmm} {mmmmm} {mmmmmmmmmmmmmmmmmmmm}
@item numeric @tab string @tab description
@item ==, eq 	@tab =~ 	@tab equal
@item !=, ne	@tab !~	@tab not equal
@item >=, ge	@tab		@tab greater or equal
@item <=, le	@tab		@tab lesser or equal
@item >, gt	@tab		@tab greater
@item <, lt	@tab		@tab lesser
@item +		@tab ++	@tab addition, string concatenation
@item -		@tab		@tab subtraction
@item *		@tab **	@tab multiplication, string repetition
@item /		@tab		@tab division
@item %		@tab		@tab modulo
@item !		@tab !	@tab logical negation (returns 0/1)
@item &&		@tab &&	@tab log. AND
@item ||		@tab ||	@tab log. OR
@item ~		@tab		@tab bit negation (complement)
@item &		@tab		@tab bit AND
@item |		@tab		@tab bit OR
@item ^		@tab		@tab bit XOR
@end multitable

Bit operator can be used only on integer numbers.

@section Ternary operator
@syindex operator, ternary

@var{expession} ? @var{expression_true} :  @var{expression_false}
@*@*
Returns expression_value if expression is @emph{true}.

@section Case operator
@syindex operator, case

case(@var{expession}, @var{key1},@var{key2}:@var{expression1},@var{key3}:@var{expression2} ...)@*

Returns corresponding expession to value of key.

@section Exist operator
@syindex operator, exist

exist(@emph{identifier})

Checks if object exists.
Returns:
@multitable {mmmmmmmmmmmmmmmmmmmm} {mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm}
@item 0				@tab	object doesn't exist
@item "variable"		@tab	variable from application
@item "temporary variable"	@tab	variable set by template
@item "automatic variable"	@tab	automaticly created variable
@item "fragment"		@tab	fragment
@end multitable

@section Functions
@syindex functions
@syindex function, len
@syindex len
@syindex function, substr
@syindex substr
@syindex function, date
@syindex date
@syindex function, round
@syindex round
@syindex function, random
@syindex random

@multitable {mmmmmmmmmmmmmmm} {mmm} {mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm}
@item function					@tab	type	@tab	description
@item len(@emph{text}				@tab	T	@tab	length of string (number of characters)
@item substr(@emph{text},@emph{n},@emph{len})	@tab	T	@tab	substring, @emph{len} characters from string @emph{text} begining from @emph{n}
@item date(@emph{format}, @emph{date}, @emph{conf}) @tab	T	@tab	formatting of date
@item round(@emph{n}, @emph{prec})		@tab	N	@tab	rounds number with @emph{prec} precision
@item random(@emph{n})					@tab	N	@tab	random number in interval 0 .. @emph{n}
@end multitable

@page
@section Index for chapter
@printindex sy