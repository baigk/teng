@c $Id: template.texi,v 1.10 2004-11-17 10:36:39 franci_cz Exp $
@c Syntax index
@defindex sy

@node Syntax, C++ API, Introduction, Top
@chapter Syntax

Tags are enclosed by @strong{<?teng} and @strong{?>} marks.

@section Comment
@syindex comment

<!--- comment --->

Comment will not be in output file.

@section Include

<?teng include file="@var{template.teng}" ?>

Include other template file.

@section Whitespace formating
@syindex whitespace, formating

begin of block: <?teng format space="@var{value}" ?>
end of block: <?teng endformat ?>

Set type of formating whitespace in output file. Value of @emph{space} is one of:
@table @emph
@item nowhite
removes all whitespaces
@item onespace
collapse all whitespace characters into one space
@item striplines
removes all whitespaces at the begin and end of row except line break
@item joinlines
removes newline character and all whitespaces at begin of next row
@item nowhitelines
removes all empty rows
@item noformat
end parent space formating
@end table

@section Fragment
@syindex fragment

begin of block: <?teng frag @var{identifier} ?>
end of block:	<?teng endfrag ?>

Basic data block for reference by application

Default variables:
@table @emph
@item _count
number of iterations of fragment.
@item _number
actual count of iteration. It begins with 0 and exists only in fragment.
@item _this
actual fragment context
@end table

@section Condicional block
@syindex condition
@syindex if
@syindex elseif
@syindex else

begin: <?teng if @var{expression} ?>@*
next:  <?teng elseif @var{expression} ?>@*
next:  <?teng else ?>@*
end:   <?teng endif ?>@*
@*
@var{Expression} is envaluated as @var{false} if is equal to empty string, string "0" or number 0. Type of data is ignored.

@section Definition of variable
@syindex variables, definition

<?teng set @var{variable}=@var{expression} ?>
@*@*
Variable is available only in current fragment. Redefinition of variable submited by application will raise error.

@section Variable
@syindex variables

<?teng expr @var{$variable} ?>@*
short: $@{variable@}@*
shorter: $variable
@*@*
Include variable (data from application or defined by @strong{set} tag).
Must begin with letter or _. Can be followed by number. Must start with $ character in expression.@*

Naming convetion
@syindex variables, naming
@multitable {mmmmmmmmmmmmmmm} {mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm}
@item name @tab unqualified identifier. Only in local context of actual fragment
@item recipient.name @tab partialy qualified identifier
@item .message.recipient.name @tab fully qualified identifier
@end multitable

@section Dictionary item
@syindex dictionary

<?teng expr @var{#item} ?>@*
short: #@{item@}@*
shorter: #item
@*@*
Include item from language dictionary into output. Item may be also result of expression.

@section Expression
@syindex expression

<?teng expr @var{expression} ?>@*
short: $@{expression@}
@*@*
General expression. Can by combination of data literals, variables, dictionary items, functions, operators and parentheses. Parentheses sets priority.

@section Literals
@syindex literals

@table @strong
@item string
"Lorem ipsum dolor sit amet"
@table @asis
@item Escaped characters
@item \"
quote "
@item \\
backslash \
@item \n
new line
@item \r
carriage return
@item \t
tabelator
@item \<char>
<char>
@end table
@item integer
123
@item real number (float)
123.45
@end table

@section Operators
@syindex operator
@syindex operator, bit

@multitable {mmmmm} {mmmmm} {mmmmmmmmmmmmmmmmmmmm}
@item @strong{numeric} @tab @strong{string} @tab @strong{description}
@item ==, eq 	@tab =~ 	@tab equal
@item !=, ne	@tab !~	@tab not equal
@item >=, ge	@tab		@tab greater or equal
@item <=, le	@tab		@tab lesser or equal
@item >, gt	@tab		@tab greater
@item <, lt	@tab		@tab lesser
@item +		@tab ++	@tab addition, string concatenation
@item -		@tab		@tab subtraction
@item *		@tab **	@tab multiplication, string repetition
@item /		@tab		@tab division
@item %		@tab		@tab modulo
@item !		@tab !	@tab logical negation (returns 0/1)
@item &&		@tab &&	@tab log. AND
@item ||		@tab ||	@tab log. OR
@item ~		@tab		@tab bit negation (complement)
@item &		@tab		@tab bit AND
@item |		@tab		@tab bit OR
@item ^		@tab		@tab bit XOR
@end multitable

Bit operator can be used only on integer numbers.

@section Ternary operator
@syindex operator, ternary

@var{expession} ? @var{expression_true} :  @var{expression_false}
@*@*
Returns expression_value if expression is @emph{true}.

@section Case operator
@syindex operator, case

case(@var{expession}, @var{key1},@var{key2}:@var{expression1},@var{key3}:@var{expression2} ...)@*

Returns corresponding expession to value of key.

@section Exist operator
@syindex operator, exist

exist(@emph{identifier})

Checks if object exists.
Returns:
@multitable {mmmmmmmmmmmmmmmmmmmm} {mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm}
@item 0				@tab	object doesn't exist
@item "variable"		@tab	variable from application
@item "temporary variable"	@tab	variable set by template
@item "automatic variable"	@tab	automaticly created variable
@item "fragment"		@tab	fragment
@end multitable

@section Functions
@syindex functions
@syindex function, date
@syindex date
@syindex function, escape
@syindex escape
@syindex function, int
@syindex int
@syindex function, isenabled
@syindex isenabled
@syindex function, isnumber
@syindex isnumber
@syindex function, len
@syindex len
@syindex function, nl2br
@syindex nl2br
@syindex function, now
@syindex now
@syindex function, numformat
@syindex numformat
@syindex function, random
@syindex random
@syindex function, reorder
@syindex reorder
@syindex function, round
@syindex round
@syindex function, sectotime
@syindex sectotime
@syindex function, substr
@syindex substr
@syindex function, unescape
@syindex unescape
@syindex function, urlescape
@syindex urlescape
@syindex function, wordsubstr
@syindex wordsubstr

@multitable {mmmmmmmmmmmmmmm} {mmm} {mmmmmmmmmmmmmmmmmmmmmmmmmmmmm}
@item @strong{function}									@tab	@strong{type}	@tab	@strong{description}
@item date(@var{format}, @var{date}, @var{conf})					@tab	T	@tab	formatting of date (@var{format} - C-like syntax, see strftime(3))
@item escape(@var{text})								@tab	T	@tab	escapes @var{text} by current content-type
@item int(@var{number})									@tab	T	@tab	integer of @var{number}
@item isenabled(@var{feature})								@tab	T	@tab	returns 1 if @var{feature} is enabled @*
"debug" - <?teng debug ?>
"bytecode" - <?teng bytecode ?>
@item isnumber(@var{value})								@tab	T	@tab	returns 1 if @var{value} is number, otherwise 0
@item len(@var{text})									@tab	T	@tab	length of string (number of characters, supports utf-8)
@item nl2br(@var{text})									@tab	T	@tab	replace newline char ('\n') by '\n<br />'
@item now()										@tab	N	@tab	seconds since begin of epoch (1.1.1970)
@item numformat(@var{number}, @var{prec}, @emph{point}=".", @emph{thousandSep}="")	@tab 	T 	@tab	formats number to precision of @var{prec} with decimal separator @emph{point} and thousand separator @emph{thousandSep}
@item random(@var{n})									@tab	N	@tab	random number in interval 0 <= x < @var{n}
@item reorder(@var{text}, ...)								@tab	T	@tab	@var{%number} in @var{text} is substituted by @emph{number}-th parametr @* example: reorder("%2 is %1", "first", "second") => "second is first"
@item round(@var{n}, @var{prec})							@tab	N	@tab	rounds number with @var{prec} precision
@item sectotime(@var{number})								@tab	N	@tab	takes @var{number} as seconds and returns H:MM:SS @* example: sectotime(123) => "0:02:03"
@item substr(@var{text},@var{begin},@var{end}, @emph{prefix}="", @emph{suffix}="")	@tab	T	@tab	substring, characters from string @var{text} beginning in interval @var{begin} <= n < @var{end} @* @emph{prefix} is added only if @var{begin} > 0
@item unescape(@var{text})								@tab	T	@tab	reverse to @emph{escape}
@item urlescape(@var{text})								@tab	T	@tab	escape URL
@item wordsubstr(@var{text},@var{begin},@var{end}, @emph{prefix}="", @emph{suffix}="")	@tab	T	@tab	same like @emph{substr}, but cuts at whole words
@end multitable

@page
@section Index of chapter
@printindex sy
